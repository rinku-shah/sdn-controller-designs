/*************************************************************************

* * This file contains all the socket level functions that is used by UE.  *************************************************************************/

#include "client.h"
//#include "utils.h"
//Below are the files included for raw packets
#include<stdio.h> //for printf
#include<string.h> //memset
#include<sys/socket.h>    //for socket ofcourse
#include<stdlib.h> //for exit(0);
#include<errno.h> //For errno - the error number
#include<netinet/udp.h>   //Provides declarations for udp header
#include<netinet/ip.h>    //Provides declarations for ip header
#include <unistd.h> //Used to get PID of current process
#include<netinet/ip_icmp.h>   //Provides declarations for icmp header
//#include<netinet/udp.h>   //Provides declarations for udp header
#include<netinet/tcp.h>   //Provides declarations for tcp header
//#include<netinet/ip.h>    //Provides declarations for ip header
#include<netinet/if_ether.h>  //For ETH_P_ALL
#include<net/ethernet.h>  //For ether_header
//#include<sys/socket.h>
#include<arpa/inet.h>
#include<sys/ioctl.h>
#include<sys/time.h>
#include<sys/types.h>
//#include<unistd.h>

/*void ProcessPacket(unsigned char* , int);
void print_ip_header(unsigned char* , int);
void print_tcp_packet(unsigned char * , int );
void print_udp_packet(unsigned char * , int );
void print_icmp_packet(unsigned char* , int );
void PrintData (unsigned char* , int);
void PrintDataPayload (unsigned char* , int);*/
//FILE *logfile; 

/*
 *Constructor: Create a UDP socket.
 */
//int tID;

/*
AUTHENTICATION_STEP_ONE..1
AUTHENTICATION_STEP_THREE..3
NAS_STEP_TWO..20
SEND_APN..5
SEND_UE_TEID..7
DETACH_REQUEST..9
UE_CONTEXT_RELEASE_REQUEST..14
UE_SERVICE_REQUEST..17
INITIAL_CONTEXT_SETUP_RESPONSE..19
REQUEST_STARTING_IP..12
*/

/*float timeout = 5;
time_t curT;
time_t endT;*/

 Client::Client(int ID){
	
	tID=2000+ID; //use global tID to distinguish between threads

        //Create a raw socket of type IPPROTO
        client_socket = socket (AF_INET, SOCK_RAW, IPPROTO_RAW);
	if(MY_DEBUG){
        cout << "Raw Send Socket created"<<endl;
	}
        //client_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
 	 if(client_socket < 0){
    	cout << "ERROR opening UDP socket" << endl;
    exit(1);
  }

	sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL)) ;
	if(MY_DEBUG){
	cout << "Raw Receive Socket created"<<endl;
	}
        //int sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL)) ;
        //setsockopt(sock_raw , SOL_SOCKET , SO_BINDTODEVICE , "eth1" , strlen("eth1")+ 1 );
     
       if(sock_raw < 0)
       {
        //Print the error with proper message
        perror("Socket Error");
        //return 1;
       }
 }


struct pseudo_header
{
    u_int32_t source_address;
    u_int32_t dest_address;
    u_int8_t placeholder;
    u_int8_t protocol;
    u_int16_t udp_length;
};
 
/*
    Generic checksum calculation function
*/
unsigned short csum(unsigned short *ptr,int nbytes) 
{
    register long sum;
    unsigned short oddbyte;
    register short answer;
 
    sum=0;
    while(nbytes>1) {
        sum+=*ptr++;
        nbytes-=2;
    }
    if(nbytes==1) {
        oddbyte=0;
        *((u_char*)&oddbyte)=*(u_char*)ptr;
        sum+=oddbyte;
    }
 
    sum = (sum>>16)+(sum & 0xffff);
    sum = sum + (sum>>16);
    answer=(short)~sum;
     
    return(answer);
}

/*
 * This function configures the port number and IP address of the created socket.
 */
 void Client::input_server_details(int server_port, const char *server_address){
        int status;
        this->server_port = server_port;
        this->server_address = server_address;
        bzero((char*)&server_sock_addr, sizeof(server_sock_addr));
        server_sock_addr.sin_family = AF_INET;
        server_sock_addr.sin_port = htons(server_port);
        // Store this IP address in server_sock_addr; pton supports IPv6 while aton does not
        status = inet_pton(AF_INET, server_address, &(server_sock_addr.sin_addr));
        if(status == 0){
                cout<<"ERROR: Invalid IP address"<<endl;
                exit(EXIT_FAILURE);
        }
 }


/*
 * This function reads from the UDP socket.
 */
 void Client::read_data(){
        int status=0;
        unsigned char* my_buffer;
	//bzero(client_buffer, BUFFER_SIZE);

	//int saddr_size , data_size;
        //struct sockaddr saddr;
	
    /*logfile=fopen("log.txt","w");
    if(logfile==NULL) 
    {
        printf("Unable to create log.txt file.");
    }*/
        //struct ethhdr *eth = (struct ethhdr *)client_buffer;
        //struct iphdr *iph = (struct iphdr *)(client_buffer  + sizeof(struct ethhdr) );
        //struct udphdr *udph = (struct udphdr*)(client_buffer + sizeof(struct iphdr) + sizeof(struct ethhdr));
	
	/*sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL)) ;
        //int sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL)) ;
        //setsockopt(sock_raw , SOL_SOCKET , SO_BINDTODEVICE , "eth0" , strlen("eth0")+ 1 );
     
       if(sock_raw < 0)
       {
        //Print the error with proper message
        perror("Socket Error");
        //return 1;
       }*/
	
	/*saddr_size = sizeof saddr;
	struct sockaddr_in client_sock_addr;
     
    //some address resolution
    //strcpy(source_ip , RAN_IP); //Source IP
   
    client_sock_addr.sin_family = AF_INET;
    client_sock_addr.sin_port = htons(RAN_UDP_PORT);
    client_sock_addr.sin_addr.s_addr = inet_addr(RAN_IP); //Dest IP
    //setsockopt(sock_raw , SOL_SOCKET , SO_BINDTODEVICE , "eth1" , strlen("eth0")+ 1 );
    //Bind the client socket to UDP port 
    //bind(sock_raw, (struct sockaddr *)& client_sock_addr, sizeof(client_sock_addr)); */

        //Receive a packet
        int c=0;
	//while(status!=17 || !flag || !tflag){
	
	/*time(&curT);
	endT = curT + (int) timeout;*/
	while(status!=17 || !tflag ){	
	 bzero(client_buffer, BUFFER_SIZE);
         data_size = recvfrom(sock_raw, client_buffer , BUFFER_SIZE-1 , 0 , &saddr , (socklen_t*)&saddr_size);
       //cout<<(string)client_buffer<<endl;
       //cout<<status;
        //Now process the packet
         
        status=ProcessPacket((unsigned char*)client_buffer , data_size); 
	/*time(&curT);
	if (curT > endT) {
		cout<<"Read Timed out"<<endl;
	}*/
	//cout<<"Status "<<status<<endl;
	//cout<<"c= "<<c++<<"flag = "<<flag<<endl;
	}
	
	//cout<<"Outside c= "<<c++<<"flag = "<<flag<<endl;
	//flag=false;
			
        //status = recvfrom(client_socket, client_buffer, BUFFER_SIZE-1, 0, NULL, NULL);
        //cout<<data_size<<endl;
        //fclose(logfile);
        //report_error(data_size);
	//close(sock_raw);
 }


int Client::ProcessPacket(unsigned char* buffer, int size)
{   
    
    int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; 
   
    //cout<<"Inside process packet"<<endl;
    ++total;
    //struct ethhdr *eth = (struct ethhdr *)buffer;
    //Get the IP Header part of this packet , excluding the ethernet header
    struct iphdr *iph = (struct iphdr*)(buffer + sizeof(struct ethhdr));
    //cout<<"Inside process packet:before switch"<<endl;

    switch (iph->protocol) //Check the Protocol and do accordingly...
    {   //cout<<"Inside process packet:inside switch"<<endl;
       /* case 1:  //ICMP Protocol
	    //cout<<"Inside process packet:ICMP";
            ++icmp;
            //print_icmp_packet( buffer , size);
            break;
         
        case 2:  //IGMP Protocol
            //cout<<"Inside process packet:IGMP";
            ++igmp;
            break;
         
        case 6:  //TCP Protocol
            //cout<<"Inside process packet:TCP";
            ++tcp;
            //print_tcp_packet(buffer , size);
            break; */
         
        case 17: //UDP Protocol
	    //cout<<"Inside process packet:UDP"<<endl;
            //++udp;
            print_udp_packet(buffer , size);
	    return(17);
            break;
         
        default: //Some Other Protocol like ARP etc.
            //cout<<"Inside process packet:others";
            //++others;
	    return(0);
            break;
    }
    //printf("TCP : %d   UDP : %d   ICMP : %d   IGMP : %d   Others : %d   Total : %d\r", tcp , udp , icmp , igmp , others , total);
}
 
/*void Client::print_ethernet_header(unsigned char* Buffer, int Size)
{
    struct ethhdr *eth = (struct ethhdr *)Buffer;
     
    fprintf(logfile , "\n");
    fprintf(logfile , "Ethernet Header\n");
    fprintf(logfile , "   |-Destination Address : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_dest[0] , eth->h_dest[1] , eth->h_dest[2] , eth->h_dest[3] , eth->h_dest[4] , eth->h_dest[5] );
    fprintf(logfile , "   |-Source Address      : %.2X-%.2X-%.2X-%.2X-%.2X-%.2X \n", eth->h_source[0] , eth->h_source[1] , eth->h_source[2] , eth->h_source[3] , eth->h_source[4] , eth->h_source[5] );
    fprintf(logfile , "   |-Protocol            : %u \n",(unsigned short)eth->h_proto);
}*/
 
void Client::print_ip_header(unsigned char* Buffer, int Size)
{
    //print_ethernet_header(Buffer , Size);
   
    unsigned short iphdrlen;
         
    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr) );
    iphdrlen =iph->ihl*4;
     
    memset(&source, 0, sizeof(source));
    source.sin_addr.s_addr = iph->saddr;
     
    memset(&dest, 0, sizeof(dest));
    dest.sin_addr.s_addr = iph->daddr;
     
    /*fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
    fprintf(logfile , "   |-IP Version        : %d\n",(unsigned int)iph->version);
    fprintf(logfile , "   |-IP Header Length  : %d DWORDS or %d Bytes\n",(unsigned int)iph->ihl,((unsigned int)(iph->ihl))*4);
    fprintf(logfile , "   |-Type Of Service   : %d\n",(unsigned int)iph->tos);
    fprintf(logfile , "   |-IP Total Length   : %d  Bytes(Size of Packet)\n",ntohs(iph->tot_len));
    fprintf(logfile , "   |-Identification    : %d\n",ntohs(iph->id));
    //fprintf(logfile , "   |-Reserved ZERO Field   : %d\n",(unsigned int)iphdr->ip_reserved_zero);
    //fprintf(logfile , "   |-Dont Fragment Field   : %d\n",(unsigned int)iphdr->ip_dont_fragment);
    //fprintf(logfile , "   |-More Fragment Field   : %d\n",(unsigned int)iphdr->ip_more_fragment);
    fprintf(logfile , "   |-TTL      : %d\n",(unsigned int)iph->ttl);
    fprintf(logfile , "   |-Protocol : %d\n",(unsigned int)iph->protocol);
    fprintf(logfile , "   |-Checksum : %d\n",ntohs(iph->check));
    fprintf(logfile , "   |-Source IP        : %s\n",inet_ntoa(source.sin_addr));
    fprintf(logfile , "   |-Destination IP   : %s\n",inet_ntoa(dest.sin_addr));*/
   /* if ((string)inet_ntoa(dest.sin_addr) == "10.127.41.2") {
	//cout<<"Dest IP= "<<inet_ntoa(dest.sin_addr)<<endl;
	flag=true;
    }
    else 
	flag=false;	*/
}
 
/*void Client::print_tcp_packet(unsigned char* Buffer, int Size)
{
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)( Buffer  + sizeof(struct ethhdr) );
    iphdrlen = iph->ihl*4;
     
    struct tcphdr *tcph=(struct tcphdr*)(Buffer + iphdrlen + sizeof(struct ethhdr));
             
    int header_size =  sizeof(struct ethhdr) + iphdrlen + tcph->doff*4;
     
    fprintf(logfile , "\n\n***********************TCP Packet*************************\n");  
         
    print_ip_header(Buffer,Size);
         
    fprintf(logfile , "\n");
    fprintf(logfile , "TCP Header\n");
    fprintf(logfile , "   |-Source Port      : %u\n",ntohs(tcph->source));
    fprintf(logfile , "   |-Destination Port : %u\n",ntohs(tcph->dest));
    fprintf(logfile , "   |-Sequence Number    : %u\n",ntohl(tcph->seq));
    fprintf(logfile , "   |-Acknowledge Number : %u\n",ntohl(tcph->ack_seq));
    fprintf(logfile , "   |-Header Length      : %d DWORDS or %d BYTES\n" ,(unsigned int)tcph->doff,(unsigned int)tcph->doff*4);
    //fprintf(logfile , "   |-CWR Flag : %d\n",(unsigned int)tcph->cwr);
    //fprintf(logfile , "   |-ECN Flag : %d\n",(unsigned int)tcph->ece);
    fprintf(logfile , "   |-Urgent Flag          : %d\n",(unsigned int)tcph->urg);
    fprintf(logfile , "   |-Acknowledgement Flag : %d\n",(unsigned int)tcph->ack);
    fprintf(logfile , "   |-Push Flag            : %d\n",(unsigned int)tcph->psh);
    fprintf(logfile , "   |-Reset Flag           : %d\n",(unsigned int)tcph->rst);
    fprintf(logfile , "   |-Synchronise Flag     : %d\n",(unsigned int)tcph->syn);
    fprintf(logfile , "   |-Finish Flag          : %d\n",(unsigned int)tcph->fin);
    fprintf(logfile , "   |-Window         : %d\n",ntohs(tcph->window));
    fprintf(logfile , "   |-Checksum       : %d\n",ntohs(tcph->check));
    fprintf(logfile , "   |-Urgent Pointer : %d\n",tcph->urg_ptr);
    fprintf(logfile , "\n");
    fprintf(logfile , "                        DATA Dump                         ");
    fprintf(logfile , "\n");
         
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer,iphdrlen);
         
    fprintf(logfile , "TCP Header\n");
    PrintData(Buffer+iphdrlen,tcph->doff*4);
         
    fprintf(logfile , "Data Payload\n");    
    PrintData(Buffer + header_size , Size - header_size );
                         
    fprintf(logfile , "\n###########################################################");
}*/
 
void Client::print_udp_packet(unsigned char *Buffer , int Size)
{
     
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)(Buffer +  sizeof(struct ethhdr));
    iphdrlen = iph->ihl*4;
     
    struct udphdr *udph = (struct udphdr*)(Buffer + iphdrlen  + sizeof(struct ethhdr));
     
    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof udph;
     
    //fprintf(logfile , "\n\n***********************UDP Packet*************************\n");
     
    print_ip_header(Buffer,Size);           
     
    /*fprintf(logfile , "\nUDP Header\n");
    fprintf(logfile , "   |-Source Port      : %d\n" , ntohs(udph->source));
    fprintf(logfile , "   |-Destination Port : %d\n" , ntohs(udph->dest));
    fprintf(logfile , "   |-UDP Length       : %d\n" , ntohs(udph->len));
    fprintf(logfile , "   |-UDP Checksum     : %d\n" , ntohs(udph->check));
     
    fprintf(logfile , "\n");
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer , iphdrlen);
         
    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer+iphdrlen , sizeof udph);
         
    fprintf(logfile , "Data Payload\n");    
     
    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , Size - header_size);
     
    PrintDataPayload(Buffer + header_size , Size - header_size);
    unsigned char *temp_buffer;
    temp_buffer = Buffer + header_size;*/

        if ((int)ntohs(udph->dest) == tID) {
		tflag=true;
    }
    else 
	tflag=false;

    strcpy(client_buffer, (const char*) Buffer + header_size);
    /*int c = 0;
 	while (temp_buffer[c] != '\0') {
 	     client_buffer[c] = temp_buffer[c];
	      c++;
   	}
   client_buffer[c] = '\0';*/
    
//    fprintf(logfile , "\n###########################################################");
}

/*void Client::PrintDataPayload (unsigned char* data , int Size)
{
    int i , j;
    fprintf(logfile , "%s\n",(unsigned char*)data);
    for(i=0 ; i < Size ; i++)
    {
        fprintf(logfile , "%c",(unsigned char)data[i]);
        /*if( i!=0 && i%16==0)   //if one line of hex printing is complete...
        {
            fprintf(logfile , "         ");
            for(j=i-16 ; j<i ; j++)
            {
                if(data[j]>=32 && data[j]<=128)
                    fprintf(logfile , "%c",(unsigned char)data[j]); //if its a number or alphabet
                 
                else fprintf(logfile , "."); //otherwise print a dot
            }
            fprintf(logfile , "\n");
        } 
         
        if(i%16==0) fprintf(logfile , "   ");
            fprintf(logfile , " %02X",(unsigned int)data[i]);
                 
        if( i==Size-1)  //print the last spaces
        {
            for(j=0;j<15-i%16;j++) 
            {
              fprintf(logfile , "   "); //extra spaces
            }
             
            fprintf(logfile , "         ");
             
            for(j=i-i%16 ; j<=i ; j++)
            {
                if(data[j]>=32 && data[j]<=128) 
                {
                  fprintf(logfile , "%c",(unsigned char)data[j]);
                }
                else
                {
                  fprintf(logfile , ".");
                }
            }
             
            fprintf(logfile ,  "\n" );
        }*/
//    }
//}
 
/*void Client::print_icmp_packet(unsigned char* Buffer , int Size)
{
    unsigned short iphdrlen;
     
    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr));
    iphdrlen = iph->ihl * 4;
     
    struct icmphdr *icmph = (struct icmphdr *)(Buffer + iphdrlen  + sizeof(struct ethhdr));
     
    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof icmph;
     
    fprintf(logfile , "\n\n***********************ICMP Packet*************************\n"); 
     
    print_ip_header(Buffer , Size);
             
    fprintf(logfile , "\n");
         
    fprintf(logfile , "ICMP Header\n");
    fprintf(logfile , "   |-Type : %d",(unsigned int)(icmph->type));
             
    if((unsigned int)(icmph->type) == 11)
    {
        fprintf(logfile , "  (TTL Expired)\n");
    }
    else if((unsigned int)(icmph->type) == ICMP_ECHOREPLY)
    {
        fprintf(logfile , "  (ICMP Echo Reply)\n");
    }
     
    fprintf(logfile , "   |-Code : %d\n",(unsigned int)(icmph->code));
    fprintf(logfile , "   |-Checksum : %d\n",ntohs(icmph->checksum));
    //fprintf(logfile , "   |-ID       : %d\n",ntohs(icmph->id));
    //fprintf(logfile , "   |-Sequence : %d\n",ntohs(icmph->sequence));
    fprintf(logfile , "\n");
 
    fprintf(logfile , "IP Header\n");
    PrintData(Buffer,iphdrlen);
         
    fprintf(logfile , "UDP Header\n");
    PrintData(Buffer + iphdrlen , sizeof icmph);
         
    fprintf(logfile , "Data Payload\n");    
     
    //Move the pointer ahead and reduce the size of string
    PrintData(Buffer + header_size , (Size - header_size) );
     
    fprintf(logfile , "\n###########################################################");
}*/
 
/*void Client::PrintData (unsigned char* data , int Size)
{
    int i , j;
    for(i=0 ; i < Size ; i++)
    {
        if( i!=0 && i%16==0)   //if one line of hex printing is complete...
        {
            fprintf(logfile , "         ");
            for(j=i-16 ; j<i ; j++)
            {
                if(data[j]>=32 && data[j]<=128)
                    fprintf(logfile , "%c",(unsigned char)data[j]); //if its a number or alphabet
                 
                else fprintf(logfile , "."); //otherwise print a dot
            }
            fprintf(logfile , "\n");
        } 
         
        if(i%16==0) fprintf(logfile , "   ");
            fprintf(logfile , " %02X",(unsigned int)data[i]);
                 
        if( i==Size-1)  //print the last spaces
        {
            for(j=0;j<15-i%16;j++) 
            {
              fprintf(logfile , "   "); //extra spaces
            }
             
            fprintf(logfile , "         ");
             
            for(j=i-i%16 ; j<=i ; j++)
            {
                if(data[j]>=32 && data[j]<=128) 
                {
                  fprintf(logfile , "%c",(unsigned char)data[j]);
                }
                else
                {
                  fprintf(logfile , ".");
                }
            }
             
            fprintf(logfile ,  "\n" );
        }
    }
}*/

/*
 * This function writes to the UDP socket.
 */
 void Client::write_data(string msg_id){
   
    //Datagram to represent the packet
    char datagram[4096] , source_ip[32] , *data , *pseudogram;
     
    //zero out the packet buffer
    memset (datagram, 0, 4096);
     
    //IP header
    struct iphdr *iph = (struct iphdr *) datagram;
     
    //UDP header
    struct udphdr *udph = (struct udphdr *) (datagram + sizeof (struct ip));
     
    struct sockaddr_in server_sock_addr;
    struct pseudo_header psh;
     
    //Data part
    //char client_data[BUFFER_SIZE];
    //strcpy(client_data, client_buffer);
    //bzero(client_buffer, BUFFER_SIZE);
    data = datagram + sizeof(struct iphdr) + sizeof(struct udphdr);
    //strcpy(data , client_data);
    strcpy(data , client_buffer);
    bzero(client_buffer, BUFFER_SIZE);
    if(MY_DEBUG){	
    cout<<"SENDING - "<<data<<endl;
    }
    //cout<<"Thread ID- "<<tID<<endl;
    /*int c = 0;
    while (client_buffer[c] != '\0') {
      data[c] = client_buffer[c];
      c++;
    }
    data[c] = '\0';*/

    //some address resolution
    strcpy(source_ip , RAN_IP); //Source IP
   
    server_sock_addr.sin_family = AF_INET;
    server_sock_addr.sin_port = htons(g_mme_port);
    server_sock_addr.sin_addr.s_addr = inet_addr(DGW_IP); //Dest IP
     
    //Bind the client socket to UDP port 
    //bind(client_socket, (struct sockaddr *)& server_sock_addr, sizeof(server_sock_addr)); 

   //Tell the kernel that we build our own packets
   /*int one = 1;
   const int *val = &one;
    if(setsockopt(client_socket, IPPROTO_IP, IP_HDRINCL, val, sizeof(one)) < 0){
		perror("setsockopt() error");
		exit(-1);
    }*/

    //Fill in the IP Header
    iph->ihl = 5;
    iph->version = 4;
    iph->tos = stoi(msg_id)*4; //16;
    iph->tot_len = sizeof (struct iphdr) + sizeof (struct udphdr) + strlen(data);
    iph->id = htonl(0); //htonl (12345); //Id of this packet
    iph->frag_off = 0;
    iph->ttl = 255;
    iph->protocol = IPPROTO_UDP;
    iph->check = 0;      //Set to 0 before calculating checksum
    iph->saddr = inet_addr(source_ip);    //Spoof the source ip address
    iph->daddr = server_sock_addr.sin_addr.s_addr;
     
    //Ip checksum
    iph->check = csum ((unsigned short *) datagram, iph->tot_len);
    
    //int pid = getpid();
    //int parentsPID = getppid();     

    //UDP header
    //udph->source = htons (RAN_UDP_PORT);
    udph->source = htons (tID);
    udph->dest = htons (g_mme_port);// htons(stoi(msg_id)+2000);
    udph->len = htons(8 + strlen(data)); //tcp header size
    udph->check = 0; //leave checksum 0 now, filled later by pseudo header
     
    //Now the UDP checksum using the pseudo header
    psh.source_address = inet_addr( source_ip );
    psh.dest_address = server_sock_addr.sin_addr.s_addr;
    psh.placeholder = 0;
    psh.protocol = IPPROTO_UDP;
    psh.udp_length = htons(sizeof(struct udphdr) + strlen(data) );
     
    int psize = sizeof(struct pseudo_header) + sizeof(struct udphdr) + strlen(data);
    pseudogram =(char*) malloc(psize);
     
    memcpy(pseudogram , (char*) &psh , sizeof (struct pseudo_header));
    memcpy(pseudogram + sizeof(struct pseudo_header) , udph , sizeof(struct udphdr) + strlen(data));
     
    udph->check = csum( (unsigned short*) pseudogram , psize);

	 int status;
        status = sendto(client_socket, datagram, iph->tot_len, 0 , (struct sockaddr*) &server_sock_addr, sizeof(server_sock_addr));
	
        report_error(status);

 }

/*
 * This function reads from the UDP socket in the form of unsigned char.
 */
 void Client::read_byte(){
        int status;
        bzero(client_byte_buffer, BUFFER_SIZE);
        status = recvfrom(client_socket, client_byte_buffer, BUFFER_SIZE-1, 0, NULL, NULL);
        report_error(status);
 }

/*
 * This function writes to the UDP socket in the form of unsigned char.
 */
 void Client::write_byte(){
        int status;
        status = sendto(client_socket, client_byte_buffer, strlen((char*)client_byte_buffer), 0,(struct sockaddr*)&server_sock_addr, sizeof(server_sock_addr));
        report_error(status);
 }

/*
 * This function generates TCP traffic at given rate using iperf3 for the specified duration of time.
 */
 int Client::sendUEData(int ue_num, string srcIp, string dstIp, int portnum, int startingPort, int endPort, string rate, size_t meanTime){
        //meanTime = 300; //10;
        //cout<<"MEAN DATA TIME="<<meanTime<<endl;

        const char *srcIpptr = srcIp.c_str();
        char c = tolower(rate[rate.size()-1]);
        string dstNetwork(SINK_SERVER_NETMASK);
        string format(1,c);

        //string f = "iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -B "+srcIp;
                                                                                                                                                                                                                         
 string f = "iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -t "+to_string(meanTime)+" -B "+srcIp;

//      string f = "iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -t 120"+" -B "+srcIp;

        if(DO_DEBUG){
                cout<<"SOURCE IP="<<srcIp<<endl;
                cout<<"DESTINATION IP="<<dstIp<<endl;
		cout<<"*** client.cpp DATA TIME _--- "<<meanTime<<endl;
                cout<<f<<endl;
        }

        bool done = false, loopedOnce = false;
        int count = 0, tmp_port, ret, realCounter = 0;
        int port_gap = endPort - startingPort;
        int numGlobaltriedPorts = 0;

        do{
        
	string g = runIperfCommand("iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -t "+to_string(meanTime)+" -B "+srcIp, srcIp);
//      string g = GetStdoutFromCommand("iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -t 60"+" -B "+srcIp);
        string cmd1 = "iperf3 -c "+dstIp+" -p "+to_string(portnum)+" -b "+rate+" -M "+to_string(LINK_MTU)+" -f "+format+" -t "+to_string(meanTime)+" -B "+srcIp;

		size_t f = g.find("Connecting to host");
                size_t found = g.find("iperf3: error - the server is busy running a test");
                size_t timeout = g.find("iperf3: error - unable to connect to server:");

                if(f == std::string::npos && found == std::string::npos && timeout != std::string::npos){
                        cout<<"FAILURE FOR "<<cmd1<<endl;
                        cout<<"iperf3 output: "<<g<<"\n for cmd "<<cmd1<<endl;
                        //return portnum;
			exit(1);
                }
                if(found != std::string::npos){
                        cout<<"iperf3 output: "<<g<<endl;
                        cout<< "Using local port " << portnum<<" "<<" count="<<count<<" real counter="<<realCounter<<endl;
                        portnum++;
                        if(portnum >= endPort){
                                if(count < port_gap){
                                        portnum = startingPort;
                                }else{
                                        loopedOnce = true;
                                        tmp_port = startingPort;
                                }
                        }
                        if(count >= port_gap && numGlobaltriedPorts <= NUM_GLOBAL_PORTS){
                                numGlobaltriedPorts++;
                                // Use global ports
                                ret = pthread_mutex_lock(&request_mutex);
                                if(ret < 0)
                                {
                                        perror("ERROR: mutex lock failed");
                                        exit(1);
                                }
                                portnum = global_ports[globalPortsIndex];
                                if(globalPortsIndex < NUM_GLOBAL_PORTS-1){
                                        globalPortsIndex++;
                                }else{
                                        globalPortsIndex = 0;
                                }

                                // Releasing lock
                                ret = pthread_mutex_unlock(&request_mutex);
                                if(ret < 0)
                                {
                                        perror("ERROR: mutex unlock failed");
                                        exit(1);
                                }
                                cout<<"Global port ="<<portnum<<" used approx index="<<(globalPortsIndex-1)<<endl;
                        }else if(count >= port_gap && numGlobaltriedPorts > NUM_GLOBAL_PORTS){
                                numGlobaltriedPorts = 0;
                                count = 0;
                                portnum = tmp_port;
                        }
 			count++;
                        realCounter++;
                }else{
                        if(realCounter != 0){
                                cout<< "Using global port " << portnum<<" "<<realCounter<<" DONE"<<endl;
                        }
                        done = true;
                }
        }while(!done);
	if(DO_DEBUG)
		cout<<"SENT DATA with SRC IP "<<srcIp<<endl;
        if(loopedOnce){
                portnum = tmp_port;
        }
	/*string get_pid = "ps -aux | grep -E 'iperf3.*"+srcIp+"'|grep -v 'grep'| tr -s \" \"| cut -d \" \" -f 2";
	cout<<"GET PID COMMAND --- "<<get_pid<<endl;
	string pid = GetStdoutFromCommand(get_pid);
	cout<<"\nPROCESS TO KILL - "<<pid<<endl; 	
	if(!pid.empty()){
		cout<<"\ninside PROCESS TO KILL - "<<pid<<endl; 		
		string kill_out = GetStdoutFromCommand("sudo kill -9 "+pid);
		cout<<"KILL OUTPUT ---- "<<kill_out<<endl;
	}*/
//	const char* kill_cmd = ("sudo kill $(ps -aux | grep -E 'iperf3.*"+srcIp+"'|grep -v 'grep'| tr -s \" \"| cut -d \" \" -f 2)").c_str();
//	system(kill_cmd);

        return portnum;
 }

/*
 * This function executes the specified command and returns its output.
 */
 string Client::runIperfCommand(string cmd, string srcIp) {
        string data;
        FILE * stream;
        const int max_buffer = 256;
        char buffer[max_buffer];
        //cout<<"Entered getstdout"<<endl;

        cmd.append(" 2>&1");

        stream = popen(cmd.c_str(), "r");
	/*int fd = fileno(stream);
	int flags;
	flags = fcntl(fd, F_GETFL, 0);
	flags |= O_NONBLOCK;
	fcntl(fd, F_SETFL, flags);*/



        //cout<<"After popen"<<endl;

        if (stream) {
                //cout<<"inside if stream"<<endl;
                while (!feof(stream)){
                        //cout<<"inside !feof stream "<<cmd<<endl;

                        if (fgets(buffer, max_buffer, stream) != NULL) data.append(buffer);
                }
		string get_pid = "ps -aux | grep -E 'iperf3.*"+srcIp+"'|grep -v 'grep'| tr -s \" \"| cut -d \" \" -f 2";
		//cout<<"client --- GET PID COMMAND --- "<<get_pid<<endl;
		string pid = GetStdoutFromCommand(get_pid);
		//cout<<"\nclient --- PROCESS TO KILL - "<<pid<<endl; 	
		if(!pid.empty()){
			//cout<<"\ninside PROCESS TO KILL - "<<pid<<endl; 		
			string kill_out = GetStdoutFromCommand("sudo kill -9 "+pid);
			//cout<<"KILL OUTPUT ---- "<<kill_out<<endl;
		}		


		pclose(stream);
        }
//      cout<<"before return"<<endl;

        return data;
 }

string Client::GetStdoutFromCommand(string cmd) {
        string data;
        FILE * stream;
        const int max_buffer = 256;
        char buffer[max_buffer];
        //cout<<"Entered getstdout"<<endl;

        cmd.append(" 2>&1");

        stream = popen(cmd.c_str(), "r");

        //cout<<"After popen"<<endl;

        if (stream) {
                //cout<<"inside if stream"<<endl;
                while (!feof(stream)){
                        //cout<<"inside !feof stream "<<cmd<<endl;

                        if (fgets(buffer, max_buffer, stream) != NULL) data.append(buffer);
                }
		
		pclose(stream);
        }
//      cout<<"before return"<<endl;

        return data;
 }

// Destructor: Close the UDP client socket
Client::~Client(){
        close(client_socket);
	close(sock_raw);
}
                                                                                                                                                                                                                         

#ifndef UTILS_H
#define UTILS_H
#include <fcntl.h>
#include "utils.h"
#endif

class Client{
public:
	int tID;
	int client_socket;
        char client_buffer[BUFFER_SIZE];
        char write_client_buffer[BUFFER_SIZE];
	char write_client_byte_buffer[BUFFER_SIZE];
	int sock_raw; //To receive raw packets
	int saddr_size , data_size;
	struct sockaddr saddr;
	// Byte array in C++
	unsigned char client_byte_buffer[BUFFER_SIZE];	

	int server_port;
	const char *server_address;
	struct sockaddr_in server_sock_addr;
	struct sockaddr_in source,dest;
	//bool flag=false; //flag to test the right dest IP for rcv data 
	bool tflag=false; //flag to test dest UDP port for demux of packets
	

	// Constructor
	Client(int);

	// Socket methods
	void input_server_details(int,const char*);
	void read_data();
	void write_data(string);
	void read_byte();
	void write_byte();

	int sendUEData(int, string, string, int, int, int, string, size_t);

	// Utility functions
	string GetStdoutFromCommand(string cmd);
	string runIperfCommand(string cmd,string srcIp);	

	//Raw packet functions

	int ProcessPacket(unsigned char* , int);
	void print_ip_header(unsigned char* , int);
	//void print_tcp_packet(unsigned char * , int );
	void print_udp_packet(unsigned char * , int );
	//void print_icmp_packet(unsigned char* , int );
	//void PrintData (unsigned char* , int);
	//void PrintDataPayload (unsigned char* , int);
	//void print_ethernet_header(unsigned char*, int);

	// Destructor
	~Client();		
};
#include "ran.h"
#define NO_EPOCH 6 
#define INST_ARR_LEN 300
#define INST_PERIOD 10 // period in secs
// Boolean values corresponding to various LTE procedures
bool setUpTunnel = false;
bool doDetach = false;			
bool sendData = true;			//keep either doDetach, or s1_release true for sending data
bool assignIpToInterface = true; //For data traffic only
bool s1_release = false;		// UE initiated S1 Release
bool doEncryption = false;
bool checkIntegrity = false;
bool ueServiceRequest = false;	// UE initiated service request (uplink traffic)
bool networkServiceRequest = false;	// Network initiated service request (downlink traffic)
//mix of traffic types
/*centralized control, local control, short data({72999,27000,0,1,0}), long data*/
vector<vector<int>> traffic_mix={{1499,98501,0,0,0},{3999,95001,0,0,0},{10999,89001,0,0,0},{30999,69001,0,0,0},{50999,49001,0,0,0},{70999,29001,0,0,0},{0,99999,0,0,0},{19000,80999,0,0,1},{0,0,0,100,0},{0,0,100,0,0},{0,100,0,0,0}/*,{750,200,0,50,0},{100,0,0,0,0}*/};
//{1999,98001,0,0,0}:ATTACH=10-15% mix=0
//{4999,95001,0,0,0}:ATTACH=      mix=1
//{11999,88001,0,0,0}:ATTACH=25-30% mix=2
//{31999,68001,0,0,0}:ATTACH=40-45% mix=3
//{51999,48001,0,0,0}:ATTACH=60-65% mix=4
//{71999,28001,0,0,0}:ATTACH=80-85% mix=5
//{0,99999,0,0,0}: ATTACH=2% mix=6
//mix0 -> 80-20 wrt time, mix2 -> 20-80 wrt time

/// DYNAMIC LOAD GENERATOR ///
std::mutex traffic_mtx; 
std::mutex inst_mtx;
std::mutex lat_mtx;
int traffic_shape_size = NO_EPOCH;
//traffic_shape[5][2] = {{4,3},{4,0},{4,3},{4,1},{4,2}};
//traffic_shape[3][2] = {{4,0},{6,3},{4,0}};
//traffic_shape[5][2] = {{4,3},{6,0},{4,3},{7,0}};
int traffic_shape[5][2] = {{4,3},{4,0},{4,2},{4,1},{4,4}}; //States for the first two minutes mix_num=1 & for next 3 minutes mix_num=3 <time, mix_num>
int curr_mix_index=0;
bool dynLoad = false;
bool instrumentTptLat = false; //Instrument num_ue and response_time every 10 sec
//vector<vector<int>> traffic_shape={{2,1},{3,3}}; //States for the first two minutes mix_num=1 & for next 3 minutes mix_num=3
/// DYNAMIC LOAD GENERATOR ///

int mix_num=0;	//choose the traffix mix from above traffic_options -> {0,1,2}
float a_prob = 0;
float s_prob = 0;
//0%  att/serv == att=0.01,serv=0.99 ==>0.7%
//25% att/serv == att=0.25,serv=0.75 ==>24.6%
//50% att/serv == att=0.5,serv=0.5
//75% att/serv == att=0.75,serv=0.25 ==>75%
//100% att/serv == att=1,serv=0

//bool serviceRequestLoopFlag = true; //set this true only for service requests, for long service-req traffic only
//int fracServ = 60; //fraction of time for Service requests before next attach
//int servno = 100;

//TRAFFIC MIX 1: attach-wait-servicereq-wait-detach..repeat
//TRAFFIC MIX 2: attach-wait-servreq-wait-servreq-wait..repeat-detach..repeat
//Only registration: setUpTunnel, doDetach== true, doEncryption,checkIntegrity could be anything
//Service request: s1_release=true, ueServiceRequest OR networkServiceRequest =true
//Data traffic: setUpTunnel, doDetach, sendData, assignIpToInterface =true, s1_release AND ueServiceRequest AND networkServiceRequest==false


struct _threadArgs {
	int threadId;
	int serverPort;
	int port_gap;
	int starting_ue_id;
	int ue_id_gap;		// Number of ids of UE initially allocated to each thread
	int num_threads;
        //long delay[1000][10000]; //For storing index ofserviceRequestLoopFlag UE delays
        //int j; //secondary index for delay matrix
};

struct _ipArgs {
	string startingIp;
	long numIps;
};

// To store the statistics for the simulation
float tpt[NO_EPOCH] = {0};
float lat[NO_EPOCH] = {0};
unsigned long long num_ue_per_epoch[NO_EPOCH] = {0};
unsigned long long ue_response_time_per_epoch[NO_EPOCH] = {0};
double num_ue_inst[INST_ARR_LEN] = {0};  // Enough to store 50 min data if captured after every 10 sec
double resp_time_inst[INST_ARR_LEN] = {0};  // Enough to store 50 min data if captured after every 10 sec
int instIndex = 0; // Index to remember number of entries in instr arrays
unsigned long long prev_tpt = 0; //To remember tpt till previous period
unsigned long long prev_lat = 0; //To remember lat till previous period
vector<unsigned long long> num_ue_per_thread;
vector<unsigned long long> ue_registration_response_time;
vector<unsigned long long> stored_ue_registration_response_time;//For delay distribution
//long delay[1000][10000]; //For storing index of UE delays

string rate;		// Rate at which each UE sends data
time_t endTime;		// Simulation end time
time_t mix_endTime; //End time of current traffic mix
time_t inst_endTime; //End time of instrumenting current period (10sec)
//time_t servReqTime; //Service Request time for traffic mix containing multiple service requests
int cnt = 0;
int attNo, detNo, sreqNo = 0;//Counts number of requests served
float traffic_percent=0.0; // For Attach%:ServiceReq%, "traffic_percent" provides attach%
//int servTime; //Delta service time, to increment curTime, used for long serv-req traffic
int j = 0; //For storing index of UE delays
//int tID=0; //Thread ID
vector<int> distr_check(5,0);
// Thread function for each simulated UE
void* multithreading_func(void *arg){
	bool setUpTunnel_t = false;
	bool doDetach_t = false;			
	bool sendData_t = false;			//keep either doDetach, or s1_release true for sending data
	bool assignIpToInterface_t = false; //For data traffic only
	bool s1_release_t = false;		// UE initiated S1 Release
	bool doEncryption_t = false;
	bool checkIntegrity_t = false;
	bool ueServiceRequest_t = false;	// UE initiated service request (uplink traffic)
	bool networkServiceRequest_t = false;	// Network initiated service request (downlink traffic)
	struct _threadArgs *args = (struct _threadArgs *)arg;
	int threadId = args->threadId;
	int startingPort = args->serverPort;
	int ue_num = args->starting_ue_id;
	int port_gap =  args->port_gap;
	int gap = args->ue_id_gap;
	int maxThreads = args->num_threads;
	//int j = args->j;
	//long delay[1000][10000] = args->delay;
	time_t curTime;
	time(&curTime);
	int currentPort = startingPort;
	int endPort = startingPort + port_gap;
	pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL);
	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
	//struct timeval start, end;
	struct timeval start, start1, start2, start3, end, end1, end2, end3;
	long mtime, useconds, seconds;
	size_t idleSleepTime, serviceRequestSleepTime;

	Client user(threadId+1), sink_user(threadId+1);
	vector<string> tmpArray;
	vector<string> service_response;
	bool att_done=false;
	int loop1,loop2;
	int dataTime;
	
	while(curTime < endTime){
		int traffic_type = get_mix(traffic_mix[mix_num]); 	//weighted random selection for the traffic type for particular ue
		distr_check[traffic_type]++;
		if(DO_DEBUG){
			cout<<"\n selected traffic type = "<<traffic_type<<endl;
		}
		switch(traffic_type){
			case 0: setUpTunnel_t = true;
					doDetach_t = true;			
					sendData_t = false;			
					assignIpToInterface_t = false; 
					s1_release_t = false;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = false;
					loop1 = 100;
					loop2 = 1;
					break;
			case 1: setUpTunnel_t = true;
					doDetach_t = true;			
					sendData_t = false;			
					assignIpToInterface_t = false; 
					s1_release_t = true;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = true;
					loop1 = 1;
					loop2 = 100;
					break;
			case 2: setUpTunnel_t = true;			//long data
					doDetach_t = true;			
					sendData_t = true;			
					assignIpToInterface_t = true; 
					s1_release_t = false;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = false;
					dataTime = 300;	//seconds
					loop1 = 1;
					loop2 = 1;
					break;
			case 3: setUpTunnel_t = true;
					doDetach_t = true;			
					sendData_t = true;			
					assignIpToInterface_t = true; 
					s1_release_t = false;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = false;
					dataTime = 1;				//short data
					loop1 = 1;
					loop2 = 1;
					break;
			case 4: setUpTunnel_t = true;
					doDetach_t = true;			
					sendData_t = true;			
					assignIpToInterface_t = true; 
					s1_release_t = true;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = true;
					dataTime = 1;
					loop1 = 1;
					loop2 = 10;
					break;
			/*case 5: setUpTunnel_t = true;
					doDetach_t = true;			
					sendData_t = false;			
					assignIpToInterface_t = false; 
					s1_release_t = true;
					doEncryption_t = false;
					checkIntegrity_t = false;
					ueServiceRequest_t = true;
					loop1 = 5;
					loop2 = 5;
					break;*/
		}
		do {
			UserEquipment ue(threadId+1);

		
			//user.input_server_details(g_mme_port, g_mme_address);
			if(DO_DEBUG){
				cout<<"Attaching with MME"<<endl;
			}



			gettimeofday(&start, NULL);
			usleep(my_rand()+2000);
			if(attach_with_mme(ue, user, checkIntegrity_t)){ 	// Authentication
				//if(setUpTunnel_t || serviceRequestLoopFlag){
					// Setup tunnel
				if(setUpTunnel_t) {
						//att=1;
						/*if(attNo>6)
							setUpTunnel_t=false;*/
					//att_done=true;
					lat_mtx.lock();
					attNo++;
					lat_mtx.unlock();
					//usleep(my_rand()+200);
					gettimeofday(&start1, NULL);
					tmpArray = setup_tunnel(ue, user, doEncryption_t);
					lat_mtx.lock();
					attNo++;
					num_ue_per_thread[threadId] += 1; //Increment completion num for att req
					lat_mtx.unlock();
					//////PRINT REG TIME TO ARRAY////
					gettimeofday(&end1, NULL);
					seconds  = end1.tv_sec  - start1.tv_sec;
					useconds = end1.tv_usec - start1.tv_usec;
					mtime = ((seconds) * 1000000 + useconds);
					lat_mtx.lock();
					ue_registration_response_time[threadId] += mtime;
					lat_mtx.unlock();
					/*stored_ue_registration_response_time[j] = mtime;
					j = j + 1;*/
						////////////////////////////////////
				}
					//tmpArray: [0] = SEND_IP_SGW_TEID, [1] = IP Address of UE, [2] = SGW TEID, [3] = ue_teid, [4] = GUTI
				if(tmpArray.size()>=5){
					do{
						if(sendData_t){
								// Send data
							if(DO_DEBUG){
								cout<<"traffic_type = "<<traffic_type<<" DATA TIME = "<<dataTime<<endl;
							
							}

							currentPort = send_ue_data(ue, ue_num, rate, currentPort, startingPort, endPort, user, tmpArray, dataTime);
						}
						if(s1_release_t){
							//cout<<"SLEEPING BEFORE s1 release"<<endl;
							usleep(my_rand()+2000);		//200-700 usec
							//sreqNo++;
							//gettimeofday(&start2, NULL);
							ue_context_release(ue, user, ue_num, tmpArray[1], tmpArray[2], tmpArray[3], currentPort, networkServiceRequest);
							//gettimeofday(&end2, NULL);
							//seconds  = end2.tv_sec  - start2.tv_sec;
							//useconds = end2.tv_usec - start2.tv_usec;
							//mtime = ((seconds) * 1000000 + useconds);
							//ue_registration_response_time[threadId] += mtime;
							/*stored_ue_registration_response_time[j] = mtime;
							j = j + 1;*/
							if(DO_DEBUG){
								cout<<"UE CONTEXT RELEASE DONE with UE NUM="<<ue_num<<endl;
							}

							if(ueServiceRequest_t){
																
									/*do{
										serviceRequestSleepTime = (size_t) dist_service_request_time(generator);
									}while(serviceRequestSleepTime == 0);*/
								//usleep(5000);	
									//sleep(serviceRequestSleepTime);

									// tmpArray[1] = UE IP   tmpArray[2]= SGW TEID  tmpArray[4]=GUTI
								if(DO_DEBUG){
									cout<<"UE SERVICE REQUEST INITIATED with UE NUM="<<ue_num<<" after "<<serviceRequestSleepTime<<" seconds"<<endl;
								}
								lat_mtx.lock();
								num_ue_per_thread[threadId] += 1;//Increment completion num for serv req
								sreqNo++;
								lat_mtx.unlock();
								//cout<<"SLEEPING BEFORE service request"<<endl;
								//usleep(my_rand());
								usleep(my_rand()+2000);
								gettimeofday(&start2, NULL);
								tmpArray[3] = ue_service_request(ue, user, ue_num, tmpArray[1]); //returns newly generated ue_teid
									//////PRINT REG TIME TO ARRAY////
								gettimeofday(&end2, NULL);
								seconds  = end2.tv_sec  - start2.tv_sec;
								useconds = end2.tv_usec - start2.tv_usec;
								mtime = ((seconds) * 1000000 + useconds);
								lat_mtx.lock();								
								ue_registration_response_time[threadId] += mtime;
								lat_mtx.unlock();
								/*stored_ue_registration_response_time[j] = mtime;
								j = j + 1;*/
								////////////////////////////////////
								if(DO_DEBUG){
									cout<<"UE SERVICE REQUEST DONE with UE NUM="<<ue_num<<endl;	
								}
							} else if(networkServiceRequest){
								tmpArray[3] = network_service_request(ue, user, ue_num, tmpArray[1]); //returns newly generated ue_teid
								if(DO_DEBUG){
									cout<<"NETWORK SERVICE REQUEST DONE with UE NUM="<<ue_num<<endl;
								}
							}

						} //endif s1 release
						if(sendData_t){
							currentPort++;
							if(currentPort >= endPort){
								currentPort = startingPort;
							}
						}
						//cout<<"IN LOOP 2"<<endl;
						loop2--;
					}while(loop2>0);

					if(doDetach_t){
						// Initiate detach
						//cout<<"SLEEPING BEFORE detach"<<endl;
						//usleep(my_rand()+200);			//sleep for 200-700 usec 
						if(!s1_release_t && !sendData_t)
							usleep(my_rand()+2000);
						att_done=false;
						gettimeofday(&start3, NULL);
						detach_ue(ue, user, ue_num, tmpArray[1], tmpArray[2], tmpArray[3]);
						gettimeofday(&end3, NULL);
						lat_mtx.lock();
						detNo++;
						num_ue_per_thread[threadId] += 1;//Increment completion num for delreq
						lat_mtx.unlock();
				
						//////PRINT REG TIME TO ARRAY////
						seconds  = end3.tv_sec  - start3.tv_sec;
						useconds = end3.tv_usec - start3.tv_usec;
						mtime = ((seconds) * 1000000 + useconds);
						lat_mtx.lock();
						ue_registration_response_time[threadId] += mtime;
						lat_mtx.unlock();
						/*stored_ue_registration_response_time[j] = mtime;
						j = j + 1;*/
						////////////////////////////////////
						//cout<<"SLEEPING AFTER detach"<<endl;
						//usleep(my_rand()+200);
					}

				}//endif tmpArray.size()>=5

			}//end if attach_with_mme
			else{
				cout<<"Authentication Error"<<endl;
				//exit(1);
			} //endif else attach_with_mme
		/*	gettimeofday(&end, NULL);
			seconds  = end.tv_sec  - start.tv_sec;
			useconds = end.tv_usec - start.tv_usec;
			mtime = ((seconds) * 1000000 + useconds);
			ue_registration_response_time[threadId] += mtime;
			//if (WANT_DELAY_CDF){
			stored_ue_registration_response_time[j] = mtime;
			//delay[threadId][j] = mtime;
			j = j + 1;*/
			//}*/
			time(&curTime);
			loop1--;
			
			if(dynLoad){
				traffic_mtx.lock();
				if(curTime >= mix_endTime) {
					//cout<<"start time="<<curTime<<endl;
					lat_mtx.lock();
					//num_ue_per_epoch[curr_mix_index] = attNo + detNo + sreqNo;
					for(int i=0; i<maxThreads; i++){
						num_ue_per_epoch[curr_mix_index] = num_ue_per_epoch[curr_mix_index] + num_ue_per_thread[i];
						ue_response_time_per_epoch[curr_mix_index] = ue_response_time_per_epoch[curr_mix_index] + ue_registration_response_time[i];
					}
					lat_mtx.unlock();
					//cout<<"Total Num previous epoch is "<<num_ue_per_epoch[curr_mix_index]<<endl;
					if ( curr_mix_index > 0){
						int i = curr_mix_index;
						while (i > 0) {
							num_ue_per_epoch[curr_mix_index] = num_ue_per_epoch[curr_mix_index] - num_ue_per_epoch[i-1];
							ue_response_time_per_epoch[curr_mix_index] =  ue_response_time_per_epoch[curr_mix_index] - ue_response_time_per_epoch[i-1];
							i--;
						}
					}
					float tmp_tpt = (num_ue_per_epoch[curr_mix_index]*1.0)/(traffic_shape[curr_mix_index][0] * 60);
					float tmp_lat = (ue_response_time_per_epoch[curr_mix_index]*0.001)/num_ue_per_epoch[curr_mix_index];
					cout<<"Throughput= "<<tmp_tpt<<endl;
					cout<<"Latency(ms)= "<<tmp_lat<<endl;
					tpt[curr_mix_index] = tmp_tpt;
					lat[curr_mix_index] = tmp_lat;
//					cout<<"Num this epoch is "<<(num_ue_per_epoch[curr_mix_index]*1.0)/(traffic_shape[curr_mix_index][0] * 60.0)<<endl;
//					cout<<"Delay this epoch is "<< (ue_response_time_per_epoch[curr_mix_index]*1.0)/num_ue_per_epoch[curr_mix_index] <<endl;
					
					if(curr_mix_index < traffic_shape_size){
						curr_mix_index++;
					}
					mix_num = traffic_shape[curr_mix_index][1];
					int tmp1 = traffic_shape[curr_mix_index][0] * 60;
					mix_endTime = curTime + (int) tmp1;
					//cout<<"mix end time="<<mix_endTime<<endl;
					cout<<"mix="<<mix_num<<endl;
					//usleep(500000);
					//sleep(1);
				}
				traffic_mtx.unlock();
			}
//////  INSTRUMENTATION CODE STARTS HERE /////////////////////////////////////////////////////////
			
			if(instrumentTptLat){
				inst_mtx.lock();
				time(&curTime);
				if(curTime >= inst_endTime) {
					//cout<<"start time="<<curTime<<endl;
					lat_mtx.lock();
					//num_ue_inst[instIndex] = attNo + detNo + sreqNo;
					for(int i=0; i<maxThreads; i++){
						num_ue_inst[instIndex] =  num_ue_inst[instIndex] + num_ue_per_thread[i];
						resp_time_inst[instIndex] = resp_time_inst[instIndex] + ue_registration_response_time[i];
					}
					lat_mtx.unlock();
					//cout<<"Total Num previous epoch is "<<num_ue_per_epoch[curr_mix_index]<<endl;
					/*if ( instIndex > 0){
						int i = instIndex;
						while (i > 0) {
							num_ue_inst[instIndex] = num_ue_inst[instIndex] - num_ue_inst[i-1];
							resp_time_inst[instIndex] =  resp_time_inst[instIndex] - resp_time_inst[i-1];
							i--;
						}
					}*/
					float prev_t = num_ue_inst[instIndex];
					float prev_l = resp_time_inst[instIndex];
					num_ue_inst[instIndex] = num_ue_inst[instIndex] - prev_tpt; //Get current period val
					resp_time_inst[instIndex] = resp_time_inst[instIndex] - prev_lat;\
					resp_time_inst[instIndex] = (resp_time_inst[instIndex]*0.001)/num_ue_inst[instIndex]; //Keep it bfor num_ue_inst update coz we need total number and not throughtput
					num_ue_inst[instIndex] = (num_ue_inst[instIndex]*1.0)/INST_PERIOD;
					prev_tpt = prev_t;
					prev_lat = prev_l;
					//cout<<"Throughput= "<<num_ue_inst[instIndex]<<endl;
					//cout<<"Latency(ms)= "<<resp_time_inst[instIndex]<<endl;
					
					instIndex++;
					
					inst_endTime = curTime + (int) INST_PERIOD;
					//cout<<"mix end time="<<mix_endTime<<endl;
					//sleep(1);
				}
				inst_mtx.unlock();
			}


//////  INSTRUMENTATION CODE ENDS HERE /////////////////////////////////////////////////////////

		}while(curTime < endTime && loop1>0);
	} //end while
	

	free(args);
	pthread_exit(NULL);
}

bool attach_with_mme(UserEquipment &ue, Client &user, bool checkIntegrity){
	return ue.authenticate(user, checkIntegrity);
}

string get_starting_IP_Address(UserEquipment &ue, Client &user){
	return ue.getStartingIPAddress(user);
}

vector<string> setup_tunnel(UserEquipment &ue, Client &user, bool doEncryption){
	return ue.setupTunnel(user, doEncryption);
}

int send_ue_data(UserEquipment &ue, int ue_num, string rate, int serverPort, int startingPort, int endPort, Client &user, vector<string>& tmpArray, int dataTime){
	return ue.sendUserData(user, ue_num, rate, serverPort, startingPort, endPort, tmpArray, dataTime);
}

void ue_context_release(UserEquipment &ue, Client &user, int ue_num, string ue_ip, string sgw_teid, string ue_teid, int currentPort, bool networkServiceRequest){
	ue.initiate_ue_context_release(user, ue_num, ue_ip, sgw_teid, ue_teid, currentPort, networkServiceRequest);
}

string ue_service_request(UserEquipment &ue, Client &user, int ue_num, string ue_ip){
	return ue.send_ue_service_request(user, ue_num, ue_ip);
}

string network_service_request(UserEquipment &ue, Client &user, int ue_num, string ue_ip){
	return ue.receive_paging_request(user, ue_num, ue_ip);
}

void detach_ue(UserEquipment &ue, Client &user, int ue_num, string ue_ip, string sgw_teid, string ue_teid){
	ue.initiate_detach(user, ue_num, ue_ip, sgw_teid, ue_teid);
}

// Generate UE IP addresses and assign to the network interface
void* multithreading_add_ip(void *arg){
	string c = "";
	struct _ipArgs *args = (struct _ipArgs *)arg;
	string ip = args->startingIp;
	long numIp = args->numIps;
	system(("sudo chmod +x ipgen.sh"+c+"").c_str());
	string s = "./ipgen.sh "+ip+" "+SINK_SERVER_NETMASK+" "+ to_string(numIp) +" "+DEFAULT_IF;
	if(DO_DEBUG){
		cout<<"Generating IPs: "<<s<<endl;
	}
	system(s.c_str());
}

int main(int argc, char *args[]){
	long maxThreads = 0;
	int status;
	stringstream ss;
	string data = "";
	std::ofstream outfile;
	std::ofstream delayfile;
	std::ofstream instfile;
	
	if(argc != 4 && argc != 5){
		fprintf(stderr,"Usage: %s <max-threads> <program-run-time(in mins)> <rate[e.g. 20M (i.e. 20 Mbits/sec)  or 20K (i.e. 20 Kbits/sec)]> [<SINK_SERVER_STARTING_PORT (default:13001)>]\n", args[0]);
		exit(0);
	}

	maxThreads = atoi(args[1]);
	if(maxThreads <= 0){
		printf("Number of threads should be greater than 0\n");
		exit(0);
	}
	double tmp;
	ss << args[2];
	ss >> tmp;
	if(tmp <= 0.0){
		printf("Run time of each threads should be greater than 0.0\n");
		exit(0);
	}

	rate = args[3];
	if(rate.size() <= 1){
		printf("Rate should be of format XM or XK e.g. 20M (i.e. 20 Mbits/sec)  or 20K (i.e. 20 Kbits/sec)\n");
		exit(0);
	}

	if(argc == 5){
		int tmp_port = atoi(args[4]);
		if (tmp_port >= 65536 || tmp_port <= 1023){
			printf("Server port number should lie in [1024, 65535] only \n");
			exit(0);
		}
		SINK_SERVER_STARTING_PORT = tmp_port;
	}

	string c = "";
	system(("ifconfig"+c+" "+DEFAULT_IF+" mtu "+to_string(LINK_MTU)).c_str());

	for(int i=1; i<4096; i++){
		reusable_ue_teid.push(i);
	}

	if(sendData || networkServiceRequest){
		// Get the starting UE IP address from controller
		UserEquipment ue(1);
		Client user(2001);
		//user.input_server_details(g_mme_port, g_mme_address);
		string startingIp = get_starting_IP_Address(ue, user);

		if(assignIpToInterface){
			// Generate and assign UE IP addresses in advance
			cout<<"Allocating IPs. Please wait..."<<endl;
			time_t start;
			time(&start);
			pthread_t ipAddThread;
			struct _ipArgs * argss =   (struct _ipArgs *)malloc(sizeof(struct _ipArgs));
			argss->startingIp = startingIp;
			argss->numIps = 2 * maxThreads + 10;
			status = pthread_create(&ipAddThread,NULL, multithreading_add_ip, argss);
			report_error(status);
			pthread_join(ipAddThread, NULL);
			time_t end;
			time(&end);
			cout<<"time="<<(end-start)<<"sec"<<endl;
			sleep(5);
			if(DO_DEBUG){
				cout<<"Starting IP="<<startingIp<<endl;
			}
		}
	}

	num_ue_per_thread.resize(maxThreads, 0);
	ue_registration_response_time.resize(maxThreads, 0);
        //int ue_per_thr = 50000;
	stored_ue_registration_response_time.resize(UE_PER_THREAD, 0);

	cout<<"***************STARTING NOW***************"<<endl;
	tmp = tmp * 60;
	time_t curTime;
	time(&curTime);
	if(DO_DEBUG){
		cout<<"start time="<<curTime<<endl;
	}

	if (dynLoad){	
		cout<<"start time="<<curTime<<endl;
		int tmp1 = traffic_shape[curr_mix_index][0] * 60;
		mix_endTime = curTime + (int) tmp1;
		mix_num = traffic_shape[curr_mix_index][1];
		/*if(curr_mix_index < traffic_shape_size){
			curr_mix_index++;
		}*/
		cout<<"mix end time="<<mix_endTime<<endl;
		cout<<"mix="<<mix_num<<endl;
	}

	///// INSTRUMENTATION CODE STARTS /////////

	if (instrumentTptLat){	
		cout<<"start time="<<curTime<<endl;
		int tmp2 = INST_PERIOD;
		inst_endTime = curTime + (int) tmp2;
		//cout<<"instrumentation end time="<<inst_endTime<<endl;
	}
	///// INSTRUMENTATION CODE ENDS /////////

	endTime = curTime + (int) tmp;
	if(DO_DEBUG){
		cout<<"end time="<<endTime<<endl;
	}
	int simulationTime = (int) tmp;
	
	
	//servTime = (int) (tmp/fracServ);
        //servReqTime = curTime + (int) servTime;

	pthread_t tid[maxThreads];
	int gap = 1;
	int port_gap = PER_THREAD_PORT_WINDOW;
	int total_non_global_ports = maxThreads * port_gap;
	int global_starting_port = SINK_SERVER_STARTING_PORT + total_non_global_ports;
	// Filling global ports
	for(int i = 0; i < NUM_GLOBAL_PORTS; i++){
		global_ports[i] = global_starting_port + i;
	}

	// Create UE threads
	for(int i = 0;i<maxThreads;i++){
		struct _threadArgs * args = (struct _threadArgs *)malloc(sizeof(struct _threadArgs));
		args->threadId = i;
		args->serverPort = SINK_SERVER_STARTING_PORT + i * port_gap;
		args->port_gap = port_gap;
		args->starting_ue_id = 1 + i * gap;
		args->ue_id_gap = gap;
		args->num_threads = maxThreads;

		status = pthread_create(&tid[i], NULL, multithreading_func, args);
		report_error(status);
	}

	string s = "";
	int total_ue = 0;
	unsigned long long total_reistration_time = 0;
	double average_registration_time = 0.0;
	double registrationThroughput = 0.0;

	// Sleep for the specified simulation time
	usleep(simulationTime * 1000000); // 1sec

	/* Wake up and cancel/join all the UE threads to end simulation */
	for(int i=0;i<maxThreads;i++){
		if(DO_DEBUG){
			cout<<"******* ENDING THREAD - "<<i<<endl;
		}
		pthread_cancel(tid[i]);
		pthread_join(tid[i],NULL);
	}
	if(DO_DEBUG){
		cout<<"************ENDED!!!************"<<endl;
	}
	/* Calculations for last epoch */
	if (dynLoad == true){
		//num_ue_per_epoch[curr_mix_index] = attNo + detNo + sreqNo;
		for(int i=0; i<maxThreads; i++){
						num_ue_per_epoch[curr_mix_index] = num_ue_per_epoch[curr_mix_index] + num_ue_per_thread[i];
						ue_response_time_per_epoch[curr_mix_index] = ue_response_time_per_epoch[curr_mix_index] + ue_registration_response_time[i];
					}
		//cout<<"Total Num previous epoch is "<<num_ue_per_epoch[curr_mix_index]<<endl;
		if ( curr_mix_index > 0){
			int i = curr_mix_index;
			while (i > 0) {
				num_ue_per_epoch[curr_mix_index] = num_ue_per_epoch[curr_mix_index] - num_ue_per_epoch[i-1];
				ue_response_time_per_epoch[curr_mix_index] = ue_response_time_per_epoch[curr_mix_index] - ue_response_time_per_epoch[i-1];
				i--;
			}
		}
		float tmp_tpt = (num_ue_per_epoch[curr_mix_index]*1.0)/(traffic_shape[curr_mix_index-1][0] * 60);
		float tmp_lat = (ue_response_time_per_epoch[curr_mix_index]*0.001)/num_ue_per_epoch[curr_mix_index];
		cout<<"Throughput= "<<tmp_tpt<<endl;
		cout<<"Latency(ms)= "<<tmp_lat<<endl;
		tpt[curr_mix_index] = tmp_tpt;
		lat[curr_mix_index] = tmp_lat;
	}

	
	/////////////////////////////////

	/* Calculate and display various metrics */
	time_t actual_endTime;
	time(&actual_endTime);
	for(int i=0;i<maxThreads;i++){
		total_ue += num_ue_per_thread[i];
		total_reistration_time += ue_registration_response_time[i];
		cout<<"num_ue_per_thread["<<i<<"] "<<num_ue_per_thread[i]<<endl;
		cout<<"ue_registration_response_time["<<i<<"] "<<((ue_registration_response_time[i]*1.0)/num_ue_per_thread[i])<<" us"<<endl;
	}
	average_registration_time = (total_reistration_time*1.0)/(total_ue*1.0);
	registrationThroughput = (total_ue*1.0)/(actual_endTime - curTime);

	cout<<"***************************************STATISTICS***************************************"<<endl;
	execution_done = true;
	double averageUEperThread = ((total_ue*1.0)/maxThreads);
	averageUEperThread = roundf(averageUEperThread * 100) / 100; 
	ostringstream strs;
	strs << averageUEperThread;
	string avUE = strs.str();
	printf("Total Number of Threads=%d\n", maxThreads);
	printf("Total Number of UE=%d\n", total_ue);
	cout<<"Average Number of UE per Thread="<<averageUEperThread<<endl;
	printf("Total Execution Time=%d sec\n", (actual_endTime - curTime));

	average_registration_time = average_registration_time/1000000.0;
	cout<<"Latency = "<<average_registration_time<<" secs"<<endl;
	cout<<"Registration Throughput="<<registrationThroughput<<" registrations/sec"<<endl;
	cout<<"Attach-Request= "<<attNo<<"  Detach-Request= "<< detNo<<"  Service-Request= "<<sreqNo<<endl;
	cout << fixed;
	cout.precision(2);
	traffic_percent = ((attNo+detNo)*1.0/(attNo+detNo+sreqNo))*100; //Attach Percentage served
        cout<<"Attach Percentage= "<<traffic_percent<<endl;
	/*verify traffic distribution */
	cout<<"\n ******* verify traffic distribution "<<endl;
	for(int i=0;i<5;i++){
		cout<<i<<"--->"<<distr_check[i]<<endl;
	}
	/* end verification*/
	
	/***** EPOCH STATISTICS *******/
	for (int i=0; i<=curr_mix_index; i++){
		cout<< "EPOCH "<<i<<"Tpt= "<<tpt[i]<<" LAT(ms)= "<<lat[i]<<endl;
	}

	/******************************/
	


	/* Write the metrics to the statistics file */
	if(!fileExists(STATISTIC_FILE)){
		data.append("#MaxThreads").append(COMMA).append("#UE").append(COMMA).append("AvUE/Thread").append(COMMA);
		data.append("ExecutionTime").append(COMMA);
		data.append("RegistrationThroughput(registrations/sec)").append(COMMA);
		data.append("RegistrationLatency(sec)").append(COMMA);
		data.append("SetupTunnel(Yes/No)").append(COMMA);
		data.append("DO Detach (Yes/No)").append(COMMA);
		data.append("SendingData?(Yes/No)").append(COMMA).append("MeanDataSendingTime").append(COMMA).append("SendingRate").append(COMMA);
		data.append("#Attach").append(COMMA).append("#Detach").append(COMMA);
		data.append("#Service_Requests").append(COMMA);
		data.append("ATTACH_PERCENT").append(COMMA);
		data.append("EPOCH_TPT").append(COMMA).append("EPOCH_DELAY_ms");
		data.append("\n");
	}
	/*if(!fileExists(INST_FILE)){
		data = "";
		data.append("ThroughputPerPeriod").append(COMMA).append("RespTimePerPeriod");
		data.append("\n");
	}*/

	outfile.open(STATISTIC_FILE, std::ios_base::app);
	if (outfile.is_open()){
		data.append(to_string(maxThreads)).append(COMMA).append(to_string(total_ue)).append(COMMA).append(avUE).append(COMMA);
		data.append(to_string((actual_endTime - curTime))).append(COMMA);
		data.append(to_string(registrationThroughput)).append(COMMA);
		data.append(to_string(average_registration_time)).append(COMMA);
		data.append(setUpTunnel?"Yes":"No").append(COMMA);
		data.append(doDetach?"Yes":"No").append(COMMA);
		data.append(sendData?"Yes":"No").append(COMMA);
		data.append(to_string(UE_MEAN_DATA_SENDING_TIME)).append(COMMA).append(rate).append(COMMA);
		data.append(to_string(attNo)).append(COMMA);
		data.append(to_string(detNo)).append(COMMA).append(to_string(sreqNo)).append(COMMA);
		data.append(to_string(traffic_percent));
		if (dynLoad==true){
			for (int i=0; i<=curr_mix_index; i++){
				data.append(COMMA).append(to_string(tpt[i])).append(COMMA).append(to_string(lat[i]));
			}
		}
		data.append("\n");
		outfile << data;
		outfile.close();
		//data="";
	}
	
	if (instrumentTptLat) {
		instfile.open(INST_FILE, std::ios_base::app);
		data = "";
		if (instfile.is_open()){
			for(int i = 0; i < instIndex; i++){
				float t = num_ue_inst[i];
				float l = resp_time_inst[i];
				data.append(to_string(t)).append(COMMA).append(to_string(l)).append("\n");

			}
			instfile << data;
			instfile.close();
		}
	}
	
	if (WANT_DELAY_CDF){
	/*Captured Delays of each thread for Delay Distribution*/
		delayfile.open(DELAY_FILE, std::ios_base::app);
		data = "";
		if (delayfile.is_open()){
		/*for(int i = 0; i < maxThreads; i++){
			float delay = (ue_registration_response_time[i]*1.0)/(num_ue_per_thread[i]*1000);
			cout<<"Delay for UE thread "<<i<<" = "<<delay<<" ms\n";
			data.append(to_string(delay)).append("\n");
			
		}*/
			for(int i = 0; i < total_ue; i++){
				long delay = stored_ue_registration_response_time[i];
			//cout<<"Delay for UE thread "<<i<<" = "<<delay<<" ms\n";
				data.append(to_string(maxThreads)).append(COMMA).append(to_string(delay)).append("\n");

			}
			delayfile << data;
			delayfile.close();

		}
	}

	/* Kill all the iperf3 client processes after the simulation ends */
	//if(sendData){
		system(("sudo killall iperf3 "+c+"").c_str());
	//}

	exit(0);
	return 0;
}

inline bool fileExists (const std::string& name) {
	struct stat buffer;   
	return (stat (name.c_str(), &buffer) == 0); 
}

string GetStdoutFromCommand(string cmd) {
        string data;
        FILE * stream;
        const int max_buffer = 256;
        char buffer[max_buffer];
        cout<<"Entered getstdout"<<endl;

        cmd.append(" 2>&1");

        stream = popen(cmd.c_str(), "r");

        cout<<"After popen"<<endl;

        if (stream) {
                //cout<<"inside if stream"<<endl;
                while (!feof(stream)){
                        cout<<"inside !feof stream "<<cmd<<endl;

                        if (fgets(buffer, max_buffer, stream) != NULL) data.append(buffer);
                }
		
		pclose(stream);
        }
//      cout<<"before return"<<endl;

        return data;
 }
#include "ue.h"

// Thread function for each UE
void* multithreading_func(void*);

/* High-level functions for various LTE procedures */
bool attach_with_mme(UserEquipment&, Client&, bool);
int send_ue_data(UserEquipment&, int, string, int, int, int, Client&, vector<string>&, int);
vector<string> setup_tunnel(UserEquipment&, Client&, bool);
void detach_ue(UserEquipment&, Client&, int, string, string, string);
void ue_context_release(UserEquipment&, Client&, int, string, string, string, int, bool);
string ue_service_request(UserEquipment&, Client&, int, string);
string network_service_request(UserEquipment&, Client&, int, string);

// Retrieves the starting UE IP address from the controller
string get_starting_IP_Address(UserEquipment&, Client&);

// Generates UE IP addresses and assigns to the network interface
void* multithreading_add_ip(void *);

// Utility function to check if a file already exists
inline bool fileExists (const std::string& );

string GetStdoutFromCommand(string);
